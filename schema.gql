# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Badge {
  """The bit that represents the badge"""
  bit: Int!

  """The position of the set bit"""
  bitPosition: Int!

  """The date time when the badge was created"""
  createdAt: Timestamp!

  """The badge description"""
  description: String!

  """The badge icon"""
  icon: String!

  """The badge name"""
  name: String!
}

type Game {
  """The banner of the game"""
  banner: String!

  """The description of the game"""
  description: String!

  """The game fields"""
  fields: [GameField!]!

  """Games Played"""
  gp: Float!

  """The game id"""
  id: String!

  """Games Lost"""
  losses: Float!

  """The name of the game"""
  name: String!

  """Games Tied"""
  ties: Float!

  """The tournaments of this game"""
  tournaments: [Tournament!]!

  """Games Won"""
  wins: Float!
}

type GameField {
  """The field title"""
  title: String!

  """The field value"""
  value: String!
}

type Match {
  """The unique match id"""
  id: String!

  """If set to true the match is a forfeit"""
  isForfeit: Boolean

  """The teams that lost"""
  losers: [Team!]

  """The submitted scores"""
  scores: [[Int!]!]

  """The team who submitted the match"""
  submitter: Team

  """The teams playing the match"""
  teams: [Team!]!

  """The teams that have confirmed the scores"""
  teamsConfirmed: [Team!]

  """The teams that tied """
  tied: [Team!]

  """The time the score was fully confirmed"""
  timeConfirmed: Timestamp

  """The submission deadline"""
  timeDeadline: Timestamp!

  """The time people can start submitting"""
  timeStart: Timestamp!

  """The time the score was submitted"""
  timeSubmitted: Timestamp

  """The tournament"""
  tournament: Tournament!

  """The winner of the match"""
  winner: Team
}

input MatchScoreInput {
  rounds: [[Float!]!]!
}

type Message {
  """An link to an image"""
  buttons: [MessageButton!]!

  """The main content of the post"""
  content: String!

  """When the message was created / sent"""
  createdAt: Timestamp!

  """When the message was hidden by the recipient"""
  hiddenAt: Timestamp

  """The message id"""
  id: String!

  """If the user has to pick one of the buttons, or click multiple"""
  isPickOne: Boolean

  """When the message was first shown to the user"""
  readAt: Timestamp

  """The recipient of the message"""
  recipient: Player!

  """
  The user that sent the message, if its undefined it got sent by the system
  """
  sender: Player

  """The title of the post"""
  title: String!
}

type MessageButton {
  """
  The button action, only for debug purposes, and a JSON string bc i dont know how to have like an 'any' type
  """
  action: String!

  """
  When the recipient clicked the button (you can only click a button once)
  """
  clickedAt: Timestamp

  """The button color, as a string representation of a hex number (#3ff021)"""
  colorHex: String

  """The button icon, as a link to an svg"""
  icon: String

  """The button id"""
  id: String!

  """The button text"""
  text: String!
}

input MessageButtonActionInput {
  """Player id (currently not used for anything so dont use it dum dum)"""
  playerId: String

  """The role the player will get when joining a team"""
  role: String

  """Team id for if the action requires that"""
  teamId: String

  """
  Tournament id for if the action requires that (this is always required if the teamId is required)
  """
  tournamentId: String

  """
  The type of the action, currently there are only 'AcceptTeamInvite' 'DeclineTeamInvite' or 'Debug'
  """
  type: String!
}

input MessageButtonInput {
  """The action the button will perform when pressed"""
  action: MessageButtonActionInput!

  """The color of the button as a hex string"""
  colorHex: String

  """The icon of the button, a link to an svg"""
  icon: String

  """The text of the button"""
  text: String!
}

input MessageInput {
  """These are the clickable buttons of the message"""
  buttons: [MessageButtonInput!]!

  """The main content of the message"""
  content: String!

  """If the user has to pick one of the buttons, or click multiple"""
  isPickOne: Boolean

  """
  If this is set it wil send as a user, if it isnt it will be sent from [SYSTEM]
  """
  senderId: String

  """The title of the message"""
  title: String!
}

type Mutation {
  addBadgeToPlayer(bitPosition: Int!, playerId: String!): Player!
  changePlayerName(newName: String!, playerId: String!): Player!
  changePlayerRole(playerId: String!, role: Float!, teamId: String!, tournamentId: String!): Team!
  changeTeamName(newName: String!, teamId: String!, tournamentId: String!): Team!
  confirmMatch(matchId: String!, teamId: String!, tournamentId: String!): Match!
  createBadge(bitPosition: Int, description: String!, icon: String!, name: String!): Badge!
  createMessages(message: MessageInput!, recipientIds: [String!]!): [Message!]!
  createTeamForTournament(makeCaptain: Boolean, ownerId: String!, teamName: String!, tournamentId: String!): Team!
  hideMessage(messageId: String!, playerId: String!): Message!
  invitePlayersToTeam(playerIds: [String!]!, teamId: String!, tournamentId: String!): Team!
  performMessageButtonAction(buttonId: String!, messageId: String!, playerId: String!): PerformMessageButtonActionResponse!
  readAllUnreadMessages(limit: Float, messageIds: [String!], playerId: String!, reverse: Boolean): Int!
  removeBadgeFromPlayer(bitPosition: Int!, playerId: String!): Player!
  setBadgesOfPlayer(bitField: Int!, playerId: String!): Player!
  setPlayerRegion(playerId: String!, region: String!): Player!
  submitMatch(matchId: String!, scores: MatchScoreInput!, teamId: String!, tournamentId: String!): Match!
  transferTeam(addAsPlayer: Boolean, playerId: String!, teamId: String!, tournamentId: String!): Team!
  updateSettingValue(key: String!, value: String!): SiteSettings!
}

type PerformMessageButtonActionResponse {
  message: Message!
  text: String!
}

type Player {
  """The player's about page"""
  about: String!

  """
  The player's avatar, an url pointing to the image, or pointing to nothing!
  """
  avatar: String

  """The player's badges"""
  badges: [Badge!]!

  """The player's cooldowns, this is slow"""
  cooldowns: [PlayerCooldown!]!

  """The player's discord ID, only accessible to admins and mods"""
  discordId: String!

  """The player's discord Tag, needs authorization"""
  discordTag: String!

  """The player's id"""
  id: String!

  """The player's nickname, unique and changeable"""
  nickname: String!

  """Previous nicknames of this player"""
  nicknameHistory: [PlayerNicknameHistoryItem!]!

  """The player's permissions"""
  permissions: Int

  """The region the player plays from"""
  region: String

  """The teams this player is part of"""
  teams: [Team!]!

  """The player's permissions"""
  timeCreated: Timestamp!
}

type PlayerCooldown {
  """When the cooldown was created"""
  createdAt: Timestamp!

  """When the cooldown will expire"""
  expiresAt: Timestamp!

  """Explanation about what this cooldown effects"""
  explanation: String

  """The cooldown identifier"""
  id: String!

  """The cooldown type"""
  type: String!
}

type PlayerNicknameHistoryItem {
  """The nickname the player had"""
  nickname: String!

  """When this nickname was replaced"""
  replacedAt: Timestamp!
}

type Query {
  allBadges: [Badge!]!
  allGames: [Game!]!
  allPlayerIds: [String!]!
  allTournaments: [Tournament!]!
  badgeFromBitPosition(bitPosition: Int!): Badge
  badgeFromName(name: String): Badge
  badgesFromBitField(bitField: Int!): [Badge!]!
  findPlayer(search: String!): Player
  gameFromId(gameId: String!): Game
  gameFromName(gameName: String!): Game
  getMessagesForPlayer(limit: Int, playerId: String!, showHidden: Boolean, skip: Int): [Message!]!
  getSettingFromKey(key: String!): SiteSettings
  matchFromId(matchId: String!, tournamentId: String!): Match
  matchesForTeam(teamId: String!, tournamentId: String!): [Match!]!
  playerCooldownFromId(cooldownId: String!): PlayerCooldown
  playerFromDiscordId(discordId: String!): Player
  playerFromId(playerId: String!): Player
  teamFromId(id: String!, tournamentId: String, tournamentName: String): Team
  teamFromName(name: String!, tournamentId: String, tournamentName: String): Team
  tournamentFromId(id: String!): Tournament
  tournamentFromName(name: String!): Tournament
}

type SiteSettings {
  """
  You need all of these perms to edit the setting (defaults to disallowing)
  """
  editPerms: Float

  """The setting's key"""
  key: String!

  """
  The real type of the setting (everything is converted to string to transfer it over graphql). Think of this as 'string' 'number' etc.
  """
  type: String!

  """The settings value (as a string)"""
  value: String!

  """
  If anyone has one of the permissions in this bitfield they are able to view it (defaults to allowing)
  """
  viewPerms: Float
}

type Team {
  """The team avatar"""
  avatar: String

  """The date this team was created"""
  createdAt: Timestamp!

  """The amount of games played"""
  gp: Float!

  """The unique team id"""
  id: String!

  """The amount of games [insert a form of 'losing' here]"""
  losses: Float!

  """The matches of the team that should be displayed on their profile"""
  matches: [Match!]!

  """The unique team name"""
  name: String!

  """The owner of the team, this player holds the permissions"""
  owner: Player!

  """An array of team players"""
  teamPlayers: [TeamPlayer!]!

  """The amount of games tied"""
  ties: Float!

  """The unique team name"""
  tournament: Tournament!

  """The amount of games won"""
  wins: Float!
}

type TeamPlayer {
  player: Player!
  roleId: Float!
  roleName: String!
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type Tournament {
  """The tournament banner, as a link to a png"""
  banner: String!

  """The currently active matches"""
  currentMatches: [Match!]!

  """The tournament description"""
  description: String!

  """The eligibility check that has to be run"""
  eligibilityCheck: String

  """The end date"""
  end: Timestamp!

  """The tournament game"""
  game: Game!

  """The tournament icon, as a link to an svg"""
  icon: String!

  """The unique tournament id"""
  id: String!

  """The maximum score allowed to enter by players for a match"""
  matchMaxScore: Float!

  """The amount of rounds a match has in this tournament"""
  matchRounds: Float!

  """All the matches that the tournament had"""
  matches: [Match!]!

  """The unique tournament name"""
  name: String!

  """The allowed region"""
  region: String

  """The registration end date"""
  registrationEnd: Timestamp!

  """The registration start date"""
  registrationStart: Timestamp!

  """The tournament rules, as markdown text"""
  rules: String!

  """The start date"""
  start: Timestamp!

  """The tournament summary"""
  summary: String!

  """Teams in the tournament"""
  teams: [Team!]!

  """The tournament type"""
  type: String!
}
